import axios from 'axios';
import Constants from 'expo-constants';

const API_URL = 'https://api.openai.com/v1/chat/completions';

const createSystemPrompt = (
  childData?: {
    name?: string;
    age?: string;
    diagnosis?: string;
    developmentAreas?: string[];
  },
  language: string = 'en',
) => {
  const languageInstructions = {
    en: {
      role: 'You are Nuroo, a specialized AI assistant for parents of neurodivergent children.',
      guidelines: [
        'Always be encouraging and positive',
        'Provide specific, actionable suggestions',
        "Consider the child's unique needs",
        'Suggest activities that are fun and engaging',
        'Keep responses concise but helpful',
        'Use simple language that parents can understand',
      ],
      response: 'Respond as a supportive child development expert in English.',
    },
    ru: {
      role: '–í—ã - Nuroo, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π –Ω–µ–π—Ä–æ—Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö –¥–µ—Ç–µ–π.',
      guidelines: [
        '–í—Å–µ–≥–¥–∞ –±—É–¥—å—Ç–µ –æ–±–æ–¥—Ä—è—é—â–∏–º–∏ –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º–∏',
        '–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ, –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è',
        '–£—á–∏—Ç—ã–≤–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ —Ä–µ–±—ë–Ω–∫–∞',
        '–ü—Ä–µ–¥–ª–∞–≥–∞–π—Ç–µ –∑–∞–Ω—è—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤–µ—Å–µ–ª—ã–µ –∏ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ',
        '–î–µ—Ä–∂–∏—Ç–µ –æ—Ç–≤–µ—Ç—ã –∫—Ä–∞—Ç–∫–∏–º–∏, –Ω–æ –ø–æ–ª–µ–∑–Ω—ã–º–∏',
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ—Å—Ç–æ–π —è–∑—ã–∫, –ø–æ–Ω—è—Ç–Ω—ã–π —Ä–æ–¥–∏—Ç–µ–ª—è–º',
      ],
      response:
        '–û—Ç–≤–µ—á–∞–π—Ç–µ –∫–∞–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é –¥–µ—Ç–µ–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.',
    },
  };

  const currentLang =
    languageInstructions[language as keyof typeof languageInstructions] ||
    languageInstructions.en;

  let prompt = `${currentLang.role}
–í–∞—à–∞ —Ä–æ–ª—å - –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ, –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è.

–†—É–∫–æ–≤–æ–¥—è—â–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:
${currentLang.guidelines.map((guideline) => `- ${guideline}`).join('\n')}

`;

  if (childData?.name && childData?.age) {
    prompt += `–†–µ–±—ë–Ω–æ–∫: ${childData.name}, –í–æ–∑—Ä–∞—Å—Ç: ${childData.age}\n`;
  }

  if (childData?.diagnosis) {
    prompt += `–î–∏–∞–≥–Ω–æ–∑: ${childData.diagnosis}\n`;
  }

  if (childData?.developmentAreas && childData.developmentAreas.length > 0) {
    prompt += `–û–±–ª–∞—Å—Ç–∏ —Ñ–æ–∫—É—Å–∞: ${childData.developmentAreas.join(', ')}\n`;
  }

  prompt += `\n${currentLang.response}`;

  return prompt;
};

export const askNuroo = async (
  message: string,
  childData?: {
    name?: string;
    age?: string;
    diagnosis?: string;
    developmentAreas?: string[];
  },
  language: string = 'en',
) => {
  const apiKey = Constants.expoConfig?.extra?.OPENAI_API_KEY;
  const projectId = Constants.expoConfig?.extra?.OPENAI_PROJECT_ID;

  if (!apiKey) {
    throw new Error(
      'OPENAI_API_KEY is missing. Please set it in your .env and app.config.js',
    );
  }

  console.log('üîê API KEY:', apiKey ? '‚úÖ Found' : '‚ùå Missing');
  console.log('üì¶ PROJECT ID:', projectId || 'Not required');
  console.log('üë∂ Child Data:', childData);
  console.log('üåç Language:', language);

  const systemPrompt = createSystemPrompt(childData, language);
  const model = 'gpt-4.1-mini';

  try {
    console.log(`üîÑ Using model: ${model}`);
    const response = await axios.post(
      API_URL,
      {
        model,
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: message },
        ],
        max_tokens: 500,
        temperature: 0.7,
      },
      {
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${apiKey}`,
          ...(projectId && { 'OpenAI-Project': projectId }),
        },
        timeout: 30000,
      },
    );

    const reply = response.data.choices[0]?.message?.content?.trim();
    console.log(`‚úÖ Success with model: ${model}`);
    return reply || "Sorry, I couldn't generate a response.";
  } catch (err: any) {
    console.error(
      `‚ùå Model ${model} failed:`,
      err.response?.data?.error?.message || err.message,
    );
    throw new Error(
      err.response?.data?.error?.message ||
        err.message ||
        'OpenAI API failed. Please check your API access and billing.',
    );
  }
};

export const generateDevelopmentTask = async (
  area: string,
  childData?: {
    name?: string;
    age?: string;
    diagnosis?: string;
  },
  language: string = 'en',
) => {
  const languagePrompts = {
    en: `Create a fun, engaging ${area} development activity for a child. 
Make it specific, age-appropriate, and easy for parents to implement at home.
Include: activity name, simple instructions, materials needed, and expected duration.
Respond in English.`,
    ru: `–°–æ–∑–¥–∞–π—Ç–µ –≤–µ—Å–µ–ª–æ–µ, —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é ${area} –¥–ª—è —Ä–µ–±—ë–Ω–∫–∞.
–°–¥–µ–ª–∞–π—Ç–µ –µ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –≤–æ–∑—Ä–∞—Å—Ç—É –∏ –ø—Ä–æ—Å—Ç—ã–º –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π –≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–æ–º–∞.
–í–∫–ª—é—á–∏—Ç–µ: –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è, –ø—Ä–æ—Å—Ç—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –æ–∂–∏–¥–∞–µ–º—É—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å.
–û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.`,
  };

  const prompt =
    languagePrompts[language as keyof typeof languagePrompts] ||
    languagePrompts.en;
  return await askNuroo(prompt, childData, language);
};
